AI Project Meeting Meeting 12 February 2011

Class City:
Attributes
Name - String
x - int
y - int
List<connections_out> - cities
preVisited - Boolean
prevCity - City

Methods 
- Get/Set
- isConnected
- isVisited

Auxillary Functions:
Distance(city, city)
ComparePossibilities(List<possible>, actual distance)
  - Best choice city
  - remove that city from list
CalculateEstimate(City, distance) -> Returns int


---
Pick node
List alternatives
Pick Best Option
---

Our Pseudo Code
Main:
  Read in files
  Create List Array[] for cities
  Read In: Start, End, Exclude

  while(Best != end && ListPossible != empty){
    Best <- ComparePossible
    RemoveFromPossible(Best)
    List <- ListPossible(Best)
    Update Best.previousCity
    Update Best.prevVisited
  }

g
Pseudo-Code from Wikipedia
function A*(start,goal)
     closedset := the empty set                 // The set of nodes already evaluated.     
     openset := set containing the initial node // The set of tentative nodes to be evaluated.
     came_from := the empty map                 // The map of navigated nodes.
     g_score[start] := 0                        // Distance from start along optimal path.
     h_score[start] := heuristic_estimate_of_distance(start, goal)
     f_score[start] := h_score[start]           // Estimated total distance from start to goal through y.
     while openset is not empty
         x := the node in openset having the lowest f_score[] value
         if x = goal
             return reconstruct_path(came_from, came_from[goal])
         remove x from openset
         add x to closedset
         foreach y in neighbor_nodes(x)
             if y in closedset
                 continue
             tentative_g_score := g_score[x] + dist_between(x,y)
 
             if y not in openset
                 add y to openset
                 tentative_is_better := true
             elseif tentative_g_score < g_score[y]
                 tentative_is_better := true
             else
                 tentative_is_better := false
             if tentative_is_better = true
                 came_from[y] := x
 
                 g_score[y] := tentative_g_score
                 h_score[y] := heuristic_estimate_of_distance(y, goal)
                 f_score[y] := g_score[y] + h_score[y]
     return failure
 
 function reconstruct_path(came_from, current_node)
     if came_from[current_node] is set
         p = reconstruct_path(came_from, came_from[current_node])
         return (p + current_node)
     else
         return current_node